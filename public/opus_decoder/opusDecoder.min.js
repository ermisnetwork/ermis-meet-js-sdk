!function(e){"use strict";let r=!1,t=!1,o=null;async function s(){return r?Promise.resolve():(t&&o||(t=!0,o=new Promise((e,o)=>{if(void 0!==window.Recorder)return r=!0,t=!1,void e();const s=document.createElement("script");s.src=`dist/opus_decoder/recorder.min.js?t=${Date.now()}`,s.onload=()=>{r=!0,t=!1,console.log("Recorder.js loaded successfully"),e()},s.onerror=e=>{t=!1,console.error("Failed to load Recorder.js:",e),o(new Error("Failed to load Recorder.js. Please ensure the file exists at /opus_decoder/recorder.min.js"))},document.head.appendChild(s)})),o)}function i(e,...r){0===r.length?console.log(`[Opus Decoder] ${e}`):console.log(`[Opus Decoder] ${e}`,...r)}console.log("[Opus Decoder] Initializing OpusAudioDecoder module, version 1.0.0");e.OpusAudioDecoder=class{constructor(e){this.output=e.output,this.error=e.error||console.error,this.state="unconfigured",this.frameCounter=0,this.decoderWorker=null,this.sampleRate=48e3,this.numberOfChannels=1,this.counter=0,this.baseTimestamp=0,this.isSetBaseTimestamp=!1,this.lastAudioTimestamp=0,this.lastDuration=0,this.audioStartTimestamp=0}async configure(e={}){try{e.sampleRate&&(this.sampleRate=e.sampleRate),e.numberOfChannels&&(this.numberOfChannels=e.numberOfChannels);const r=`../opus_decoder/decoderWorker.min.js?t=${Date.now()}`;return this.decoderWorker=new Worker(r),this.decoderWorker.onmessage=e=>{null!==e.data&&e.data&&e.data.length&&this._handleDecodedAudio(e.data)},this.decoderWorker.onerror=e=>{this.error(`Decoder worker error: ${e.message}`)},this.decoderWorker.postMessage({command:"init",decoderSampleRate:this.sampleRate,outputBufferSampleRate:this.sampleRate,numberOfChannels:this.numberOfChannels}),this.state="configured",this.baseTimestamp=0,this.isSetBaseTimestamp=!1,this.lastDuration=0,i("Opus decoder initialized and configured"),!0}catch(e){return this.error(`Error initializing decoder: ${e.message}`),this.state="unconfigured",!1}}decode(e){if("configured"!==this.state)return i("Decoder not configured, cannot decode chunk"),void this.error("Decoder not configured");try{this.isSetBaseTimestamp||(this.baseTimestamp=e.timestamp,this.lastAudioTimestamp=this.baseTimestamp,this.isSetBaseTimestamp=!0,this.lastDuration=0),this.currentTimestamp=e.timestamp,this.currentDuration=e.duration||2e4;const r=new Uint8Array(e.byteLength);e.copyTo(r),this.decoderWorker.postMessage({command:"decode",pages:r},[r.buffer]),this.frameCounter++}catch(e){i("Opus decoding error:",e),this.error(`Opus decoding error: ${e.message||e}`)}}_handleDecodedAudio(e){if(e&&e.length)try{const r=e[0].length,t=r/this.sampleRate*1e6;this.lastAudioTimestamp?this.lastAudioTimestamp+=this.lastDuration||t:this.lastAudioTimestamp=this.baseTimestamp,this.lastDuration=t;const o=this.lastAudioTimestamp,s=function(e){if(!Array.isArray(e)||0===e.length)throw new Error("Input must be a non-empty array of Float32Array channels");const r=e.length,t=e[0].length;for(let o=1;o<r;o++)if(e[o].length!==t)throw new Error("All channels must have the same number of frames");const o=new Float32Array(r*t);for(let s=0;s<r;s++)o.set(e[s],s*t);return o}(e),i=new AudioData({format:"f32-planar",sampleRate:this.sampleRate,numberOfChannels:this.numberOfChannels,numberOfFrames:r,timestamp:o,duration:this.currentDuration,data:s});this.output(i)}catch(e){this.error(`Error creating AudioData: ${e.message}`)}}flush(){return Promise.resolve()}reset(){return this.baseTimestamp=0,this.isSetBaseTimestamp=!1,this.lastDuration=0,this.frameCounter=0,this.lastAudioTimestamp=0,this.audioStartTimestamp=0,this.counter=0,Promise.resolve()}close(){return this.decoderWorker&&(this.decoderWorker.terminate(),this.decoderWorker=null),this.state="closed",Promise.resolve()}},e.ensureRecorderScriptLoaded=s,e.initAudioRecorder=async function(e,r={}){try{await s()}catch(e){throw console.error("Error loading Recorder.js:",e),e}const t={...{monitorGain:0,recordingGain:1,numberOfChannels:1,encoderSampleRate:48e3,encoderBitRate:32e3,encoderApplication:2051,encoderComplexity:0,encoderFrameSize:20,timeSlice:100,streamPages:!0,maxFramesPerPage:1},...r};if("undefined"==typeof Recorder)throw new Error("Recorder.js not loaded! ");if(!Recorder.isRecordingSupported())throw new Error("Browser does not support recording");try{const r=new MediaStream([e]);console.log("Using provided MediaStreamTrack");const o=window.AudioContext||window.webkitAudioContext,s=new o({sampleRate:t.encoderSampleRate}).createMediaStreamSource(r),i={monitorGain:t.monitorGain,recordingGain:t.recordingGain,numberOfChannels:t.numberOfChannels,encoderSampleRate:t.encoderSampleRate,encoderPath:`dist/opus_decoder/encoderWorker.min.js?t=${Date.now()}`,sourceNode:s,streamPages:t.streamPages,encoderFrameSize:t.encoderFrameSize,encoderBitRate:t.encoderBitRate,encoderApplication:t.encoderApplication,encoderComplexity:t.encoderComplexity,maxFramesPerPage:t.maxFramesPerPage};console.log("Recorder options:",i);const n=new Recorder(i);return n.onstart=()=>console.log("Recorder started"),n.onstop=()=>console.log("Recorder stopped"),n.onpause=()=>console.log("Recorder paused"),n.onresume=()=>console.log("Recorder resumed"),n}catch(e){throw console.error("Error initializing recorder:",e),e}},Object.defineProperty(e,"__esModule",{value:!0})}({});
