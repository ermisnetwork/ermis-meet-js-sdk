!function(){"use strict";globalThis.MediaStreamTrackGenerator||(globalThis.MediaStreamTrackGenerator=class{constructor({kind:e}){if("video"===e){const e=document.createElement("canvas");let r;try{if(r=e.getContext("webgl",{desynchronized:!0}),!r)return console.warn("WebGL not supported, falling back to 2D canvas for MediaStreamTrackGenerator polyfill."),this.create2DCanvasTrack(e)}catch(r){return console.warn("Error initializing WebGL, falling back to 2D canvas for MediaStreamTrackGenerator polyfill.",r),this.create2DCanvasTrack(e)}const t="\n              attribute vec4 aVertexPosition;\n              attribute vec2 aTextureCoord;\n              varying highp vec2 vTextureCoord;\n              void main(void) {\n                gl_Position = aVertexPosition;\n                vTextureCoord = aTextureCoord;\n              }\n            ",a="\n              varying highp vec2 vTextureCoord;\n              uniform sampler2D uSampler;\n              void main(void) {\n                gl_FragColor = texture2D(uSampler, vTextureCoord);\n              }\n            ",i=this.initShaderProgram(r,t,a);if(!i){console.error("Failed to initialize shader program for MediaStreamTrackGenerator polyfill. Video track will not work.");const r=e.captureStream().getVideoTracks()[0];return r.writable=new WritableStream({write(e){e.close()}}),r}const o={program:i,attribLocations:{vertexPosition:r.getAttribLocation(i,"aVertexPosition"),textureCoord:r.getAttribLocation(i,"aTextureCoord")},uniformLocations:{uSampler:r.getUniformLocation(i,"uSampler")}},n=this.initBuffers(r),c=this.initTexture(r),s=e.captureStream().getVideoTracks()[0];return s.writable=new WritableStream({write(t){e.width===t.displayWidth&&e.height===t.displayHeight||(e.width=t.displayWidth,e.height=t.displayHeight,r.viewport(0,0,r.canvas.width,r.canvas.height)),r.clearColor(0,0,0,0),r.clear(r.COLOR_BUFFER_BIT),r.useProgram(o.program),r.bindBuffer(r.ARRAY_BUFFER,n.position),r.vertexAttribPointer(o.attribLocations.vertexPosition,2,r.FLOAT,!1,0,0),r.enableVertexAttribArray(o.attribLocations.vertexPosition),r.bindBuffer(r.ARRAY_BUFFER,n.textureCoord),r.vertexAttribPointer(o.attribLocations.textureCoord,2,r.FLOAT,!1,0,0),r.enableVertexAttribArray(o.attribLocations.textureCoord),r.activeTexture(r.TEXTURE0),r.bindTexture(r.TEXTURE_2D,c),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,t),r.uniform1i(o.uniformLocations.uSampler,0),r.drawArrays(r.TRIANGLE_STRIP,0,4),t.close()}}),s}}create2DCanvasTrack(e){const r=e.getContext("2d",{desynchronized:!0}),t=e.captureStream().getVideoTracks()[0];return t.writable=new WritableStream({write(t){e.width=t.displayWidth,e.height=t.displayHeight,r.drawImage(t,0,0,e.width,e.height),t.close()}}),t}initShaderProgram(e,r,t){const a=this.loadShader(e,e.VERTEX_SHADER,r),i=this.loadShader(e,e.FRAGMENT_SHADER,t);if(!a||!i)return null;const o=e.createProgram();return e.attachShader(o,a),e.attachShader(o,i),e.linkProgram(o),e.getProgramParameter(o,e.LINK_STATUS)?o:(console.error("Unable to initialize the shader program: "+e.getProgramInfoLog(o)),null)}loadShader(e,r,t){const a=e.createShader(r);return e.shaderSource(a,t),e.compileShader(a),e.getShaderParameter(a,e.COMPILE_STATUS)?a:(console.error("An error occurred compiling the shaders: "+e.getShaderInfoLog(a)),e.deleteShader(a),null)}initBuffers(e){const r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r);e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,1,1,1,-1,-1,1,-1]),e.STATIC_DRAW);const t=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,t);return e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,1,1]),e.STATIC_DRAW),{position:r,textureCoord:t}}initTexture(e){const r=e.createTexture();return e.bindTexture(e.TEXTURE_2D,r),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),r}})}();
