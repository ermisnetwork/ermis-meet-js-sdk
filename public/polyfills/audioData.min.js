!function(){"use strict";if(!globalThis.AudioData){function a(a,e,t){switch(a){case"u8":case"u8-planar":return new Uint8Array(e,t);case"s16":case"s16-planar":return new Int16Array(e,t);case"s32":case"s32-planar":return new Int32Array(e,t);case"f32":case"f32-planar":return new Float32Array(e,t);default:throw new TypeError("Invalid AudioSampleFormat")}}function e(a){switch(a){case"u8":case"u8-planar":return 1;case"s16":case"s16-planar":return 2;case"s32":case"s32-planar":case"f32":case"f32-planar":return 4;default:throw new TypeError("Invalid AudioSampleFormat")}}function t(a){switch(a){case"u8":case"s16":case"s32":case"f32":return!0;case"u8-planar":case"s16-planar":case"s32-planar":case"f32-planar":return!1;default:throw new TypeError("Invalid AudioSampleFormat")}}console.log("AudioData not supported, using polyfill"),globalThis.AudioData=class{constructor(e){AudioData._checkValidAudioDataInit(e);{this.format=e.format,this.sampleRate=e.sampleRate,this.numberOfFrames=e.numberOfFrames,this.numberOfChannels=e.numberOfChannels,this.timestamp=e.timestamp;let t=!1;if(e.transfer){let a,r;a=e.data.buffer?e.data.buffer:e.data,r=e.transfer instanceof Array?e.transfer:Array.from(e.transfer);for(const e of r)if(e===a){t=!0;break}}let r,n=0;t?(r=e.data,n=e.data.byteOffset||0):r=e.data.slice(0);const s=a(e.format,r.buffer||r,n);this._data=s}this.duration=e.numberOfFrames/e.sampleRate*1e6}toNative(a={}){const e=new globalThis.AudioData({data:this._data,format:this.format,sampleRate:this.sampleRate,numberOfFrames:this.numberOfFrames,numberOfChannels:this.numberOfChannels,timestamp:this.timestamp,transfer:a.transfer?[this._data.buffer]:[]});return a.transfer&&this.close(),e}static fromNative(a){const e=a,r=t(e.format)?1:e.numberOfChannels,n=e.allocationSize({format:e.format,planeIndex:0}),s=new Uint8Array(n*r);for(let a=0;a<r;a++)e.copyTo(s.subarray(a*n),{format:e.format,planeIndex:a});return new AudioData({data:s,format:e.format,sampleRate:e.sampleRate,numberOfFrames:e.numberOfFrames,numberOfChannels:e.numberOfChannels,timestamp:e.timestamp,transfer:[s.buffer]})}static _checkValidAudioDataInit(a){if(a.sampleRate<=0)throw new TypeError(`Invalid sample rate ${a.sampleRate}`);if(a.numberOfFrames<=0)throw new TypeError(`Invalid number of frames ${a.numberOfFrames}`);if(a.numberOfChannels<=0)throw new TypeError(`Invalid number of channels ${a.numberOfChannels}`);{const t=a.numberOfFrames*a.numberOfChannels,r=e(a.format)*t;if(a.data.byteLength<r)throw new TypeError(`This audio data must be at least ${r} bytes`)}}allocationSize(a){if(null===this._data)throw new DOMException("Detached","InvalidStateError");const t=this._computeCopyElementCount(a);let r=this.format;a.format&&(r=a.format);return e(r)*t}_computeCopyElementCount(a){let e=this.format;a.format&&(e=a.format);const r=t(e);if(r){if(a.planeIndex>0)throw new RangeError("Invalid plane")}else if(a.planeIndex>=this.numberOfChannels)throw new RangeError("Invalid plane");if(this.format!==e&&"f32-planar"!==e)throw new DOMException("Only conversion to f32-planar is supported","NotSupportedError");const n=this.numberOfFrames,s=a.frameOffset||0;if(s>=n)throw new RangeError("Frame offset out of range");let o=n-s;if("number"==typeof a.frameCount){if(a.frameCount>=o)throw new RangeError("Frame count out of range");o=a.frameCount}let f=o;return r&&(f*=this.numberOfChannels),f}copyTo(r,n){if(null===this._data)throw new DOMException("Detached","InvalidStateError");const s=this._computeCopyElementCount(n);let o=this.format;n.format&&(o=n.format);if(e(o)*s>r.byteLength)throw new RangeError("Buffer too small");const f=this._data.subarray(n.planeIndex*this.numberOfFrames),i=n.frameOffset||0,m=this.numberOfChannels;if(this.format===o){const e=a(o,r.buffer||r,r.byteOffset||0);t(o)?e.set(f.subarray(i*m,i*m+s)):e.set(f.subarray(i,i+s))}else{const e=a(o,r.buffer||r,r.byteOffset||0);let l=0,u=1;switch(this.format){case"u8":case"u8-planar":l=128,u=128;break;case"s16":case"s16-planar":u=32768;break;case"s32":case"s32-planar":u=2147483648}if(t(this.format))for(let a=n.planeIndex+i*m,t=0;t<s;a+=m,t++)e[t]=(f[a]-l)/u;else for(let a=i,t=0;t<s;a++,t++)e[t]=(f[a]-l)/u}}clone(){if(null===this._data)throw new DOMException("Detached","InvalidStateError");return new AudioData({format:this.format,sampleRate:this.sampleRate,numberOfFrames:this.numberOfFrames,numberOfChannels:this.numberOfChannels,timestamp:this.timestamp,data:this._data})}close(){this._data=null}}}}();
